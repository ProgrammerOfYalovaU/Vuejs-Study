{"remainingRequest":"C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\src\\components\\sideBar.vue?vue&type=template&id=7d311f5c&","dependencies":[{"path":"C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\src\\components\\sideBar.vue","mtime":1585933306395},{"path":"C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\FatihCNZ\\Desktop\\VueHomework\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}